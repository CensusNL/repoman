<?php
/**
 * This file defines default configuration values for Repoman packages.
 *
 * DO NOT EDIT THIS FILE! Instead, override it in bits and pieces in your package's composer.json file in
 * its "extra" node.  Any values you define in your repository's config will override
 * the values in this file. Usually you only need to copy and fill-in the first block of
 * config options.  Many of the others are obscure and technical. For full documentation see
 * https://github.com/craftsmancoding/repoman/wiki/Configuration-Attributes
 *
 * @var $pkg_root_dir : abs. path to the repository's base path with no trailing slash.
 * @package repoman
 * @return array
 */
return array(
    'package_name' => basename($pkg_root_dir),
    'namespace' => strtolower(basename($pkg_root_dir)),
    'description' => 'This package was built with Repoman (https://github.com/craftsmancoding/repoman)',
    'version' => '0.0.0',
    'release' => 'dev',
    'copyright' => date('Y'),
    'category' => basename($pkg_root_dir), // Default category for elements

    'require_docblocks' => false, // if true, your elements *must* define docblocks in order to be imported
    'build_docs' => '*', // you may include an array specifying basenames of specific files in the build
    'log_level' => 3, // 3: INFO

    // Author stuff (better when the mgr is used)...
    'author_name' => '',
    'author_email' => '',
    'author_homepage' => '',

    // Paths
    'core_path' => '',
    'assets_path' => 'assets/',
    'docs_path' => 'docs/',

    // Dirs relative to core_path/
    'chunks_path' => 'elements/chunks/',
    'plugins_path' => 'elements/plugins/',
    'snippets_path' => 'elements/snippets/',
    'templates_path' => 'elements/templates/',
    'tvs_path' => 'elements/tvs/',

    // Relative to core/components/<namespace>/  (do not start these with a slash!)
    'orm_path' => 'model/', // <-- xPDO's ORM classes here. MODX convention is "model/"
    'migrations_path' => 'model/migrations/',
    'seeds_path' => array(),
    'validators_path' => 'tests/',
    'controllers_path' => '', // Default is blank.  MODX hard-codes this pattern: {$controllers_path}controllers/{$action}.class.php

    // Directories or files omit from packaging to core/components/$namespace/
    'omit' => array('assets', 'screenshots', 'tests', 'composer.json', 'composer.lock', 'phpunit.xml', '.git', '.gitignore'),

    // When exporting, this determines how many records are packed into each seed file
    'limit' => 50,

    // For import/install (dev), force elements to reference static file for easier editing
    'force_static' => true,
    'move' => false, // used when exporting elements: if true, the original element will be updated to the new location.
    'dry_run' => false, // use runtime setting: --dry_run to see which objects will be created.
    'dir_mode' => 0777, // mask used when creating new directories

    'target' => 'model/seeds', // dir relative to package root where where export op should save data. Usually corresponds with one of the seeds_path entries

    'abort_install_on_fail' => true, // if true, your validation tests can halt pkg install by returning "false"

    // for schema operations
    'overwrite' => false,
    'restrict_prefix' => true,

    /**
     * Define any packages to be loaded during various operations (graph, export)
     * This lets you easily see the format your objects need to be in.
     * Syntax of :
     * 'packages = array(
     *      array( 'pkg'=> <model_name>, 'path'=> 'model/', 'table_prefix' => <table_prefix>)
     *  ),
     * translates to:
     * 'packages = array(
     *      array( 'pkg'=> <model_name>, 'path'=> $pkg_root_dir.'/core/components/<namespace>/model/', 'table_prefix' => <table_prefix>)
     *  ),
     */
    'packages' => array(),

    'support' => array(
        'email' => '',
        'issues' => '',
        'forum' => '',
        'wiki' => 'http://xkcd.com/293/',
        'source' => '',
    ),
    'authors' => array(),
    /**
     * Used when building packages and for running install/import because we need to know
     * which fields identify an object and how to handle them if they already exist.
     */
    'build_attributes' => array(
        'modCategory' => array(
            'preserve_keys' => true,
            'update_object' => false, // <-- moot point when we only have a single column
            'unique_key' => array('category'),
            'related_objects' => true,
            'related_object_attributes' => array(
                'Snippets' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => 'name',
                ),
                'Chunks' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => 'name',
                ),
                'Plugins' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => 'name',
                    'related_object_attributes' => array(
                        'PluginEvents' => array(
                            'preserve_keys' => true,
                            'update_object' => false,
                            'unique_key' => array('pluginid', 'event'),
                        ),
                    ),
                ),
                'modTemplate' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => 'templatename',
                ),
                'modTemplateVar' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => 'name',
                ),
            )
        ),
        'modSystemSetting' => array(
            'unique_key' => 'key',
            'preserve_keys' => true,
            'update_object' => true, // <-- critical! We don't want to overwrite user's values
        ),
        'modMenu' => array(
            'preserve_keys' => true,
            'update_object' => true,
            'unique_key' => 'text',
            'related_objects' => true,
            'related_object_attributes' => array(
                'Action' => array(
                    'preserve_keys' => false,
                    'update_object' => true,
                    'unique_key' => array(
                        'namespace',
                        'controller'
                    ),
                ),
            ),
        ),
        // Elements
        'modSnippet' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modChunk' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modTemplate' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'templatename',
        ),
        'modTemplateVar' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modDocument' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => array('context_key', 'uri'),
        ),
        'modResource' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => array('context_key', 'uri'),
        ),
        'modPlugin' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
            'related_objects' => true,
            'related_object_attributes' => array(
                'PluginEvents' => array(
                    'preserve_keys' => true,
                    'update_object' => false,
                    'unique_key' => array('pluginid', 'event'),
                ),
            ),
        ),
        'modPluginEvent' => array(
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => array('pluginid', 'event'),
        ),
        'modAction' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => array(
                'namespace',
                'controller'
            ),
            'related_objects' => true,
            'related_object_attributes' => array(
                'Menus' => array(
                    'preserve_keys' => true,
                    'update_object' => true,
                    'unique_key' => 'text',
                ),
            ),
        ),
        'modContentType' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modDashboard' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modUserGroup' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modUserGroupRole' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modPropertySet' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modNamespace' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'name',
        ),
        'modUser' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'username',
        ),
        'modContext' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => 'key',
        ),
        'modDashboardWidget' => array(
            'preserve_keys' => true,
            'update_object' => true,
            'unique_key' => array('name', 'namespace'),
            'related_objects' => true,
            'related_object_attributes' => array(
                'Placements' => array(
                    'preserve_keys' => true,
                    'update_object' => true,
                    'unique_key' => array('dashboard', 'widget'),
                ),
            ),

        ),
        'modDashboardWidgetPlacement' => array(
            'preserve_keys' => false,
            'update_object' => true,
            'unique_key' => array('dashboard', 'widget'),
        )

    ), // end build_attributes
);
/*EOF*/
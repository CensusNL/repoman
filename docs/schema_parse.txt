Schema:parse

This function parses an existing XML schema file and creates the corresponding ORM PHP classes.
Use this function when you have changed your database schema (e.g. added tables or columns).
This corresponds to the parseSchema() method of the xPDO generator class.

Usage:

    php repoman schema:parse <pkg_root_dir> --model=<model-name> [options]



Options

--model : (string, defaults to namespace) 
    Specifies which schema file inside of model/schema/ to parse and a sub-folder inside of model/ where
    the PHP files will be written.

--table_prefix : (string, optional)
    The table name prefix used to identify a sub-set of tables.

--overwrite (mixed, optional) 
    This controls how conflicting files are handled. If not set (i.e. overwrite is false), then 
    the script behaves cowardly and will exit if any conflict is detected.
    overwrite=polite | overwrite=true will attempt to rename any conflicting files with a name
    corresponding to the Unix timestamp.
    overwrite=force will delete any conflicting files. Use with extreme caution!
    Default: false.

--restrict_prefix : (boolean, optional) Normally you want to only write schema corresponding to the 
    tables with the given table_prefix, but you can ignore this restriction by setting this to false.
    Default: true.

--dir_perms : (optional) the permissions mask to use if it is necessary to create directories.
    The global default is 0777, and it should rarely need to be changed: permissions are best
    left defined by the parent environment not forced by this script.


Examples:


Parse the XML file located at model/schema/mypre.mysql.schema.xml into classfiles.

    php repoman.php schema:parse <pkg_root_dir> --table_prefix=mypre_ --model=mypkg    

Attempt to rename files during the operation:

    php repoman.php schema:parse <pkg_root_dir> --action=parse --table_prefix=mypre_ --model=mypkg    